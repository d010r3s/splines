#include <stdio.h>
#include <stdlib.h>


/*На оценку 3 достаточно реализовать построение одного сплайна по
заданным точкам. Иными словами, нужно, имея массив из некоторо-
го количества точек, написать программу, которая позволит определять
значение функции в любой промежуточной точке. При этом гарантиру-
ется, что кривая, проходящая через данный массив точек, является од-
нозначной функцией, то есть каждому значению x соответствует только
одно значение y.
1 балл добавляется, если сплайн построен параметрическим образом,
то есть допускает задание неоднозначных функций (произвольных кри-
вых, когда одному значению x соответствует несколько значений y).
Плюс 1 балл дается за реализацию алгоритма нахождения точки пе-
ресечения двух сплайнов. Еще 1 балл добавляется, если реализованный
алгоритм признается достойным студента программы ПМИ (в достаточ-
ной мере использует материалы математических курсов).
Плюс 1 балл дается за реализацию алгоритма нахождения наимень-
шего расстояния между двумя сплайнами. */


   int main() {
       int n;
       double x,ans=0,h;
       scanf("%d",&n);
       double * node = malloc(sizeof(double)*n);
       double * val = malloc(sizeof(double)*n);
       double * m = malloc(sizeof(double)*n);
       for (int i=0;i<n;i++) {
           scanf("%lf",&node[i]);
       }
       for (int i=0;i<n;i++) {
           scanf("%lf",&val[i]);
       }
       scanf("%lf",&x);
       h = (node[n-1] - node[0]) / n;
       m[0] = (4*val[1] - val[2] - 3*val[0]) / (2*h);
       m[n-1] = (3*val[n-1] - val[n-3] - 3*val[n-2])/(2*h);
       for (int i = 1; i < n - 1; i++) {
           m[i] = (val[i+1] - val[i-1]) / (2*h);
       }
      for (int i=0;i<n-1;i++) {
          if (x <= node[i+1] && x >= node[i]) {
              ans = (((node[i+1] - x) * (node[i+1] - x) * (2 * (x - node[i]) + h)) / (h*h*h)) * val[i] +
                      (((x - node[i]) * (x - node[i]) * (2 * (node[i+1] - x) + h)) / (h*h*h)) * val[i+1] +
                      ((node[i+1] - x) * (node[i+1] - x) * (x - node[i]) / (h*h)) * m[i] +
                      ((x - node[i]) * (x - node[i]) * (x - node[i+1]) / (h*h)) * m[i+1];
          }
      }
      printf("%lf",ans);
}
